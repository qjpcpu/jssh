#!/bin/env ruby
require 'net/ssh'
require 'optparse'
require 'yaml'

class String
    def to_black
        "\033[30m#{self}\033[0m"
    end
    def to_red
        "\033[31m#{self}\033[0m"
    end
    def to_yellow
        "\033[33m#{self}\033[0m"
    end
    def to_blue
        "\033[34m#{self}\033[0m"
    end
    def to_white
        "\033[37m#{self}\033[0m"
    end
    def to_green
        "\033[32m#{self}\033[0m"
    end
    def to_cyan
        "\033[36m#{self}\033[0m"
    end
    def to_magenta
        "\033[35m#{self}\033[0m"
    end
    def to_bold
        "\033[1m#{self}\033[0m"
    end
    def to_underline
        "\033[4m#{self}\033[0m"
    end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: jssh [options]"
  opts.on("-f file","--hostfile file", "host file, every host occupy a line") do |v|
    options[:hostfile] = v
    unless File.exists? v
	puts "host file doesn't exists!".to_red
	exit
    end
  end
  opts.on("-h hosts","--hosts hosts", "hosts list") do |v|
    options[:hostlist] = v
  end
  opts.on("-u user","--user user", "user name") do |v|
    options[:user] = v
  end
  opts.on("-p password","--password password", "password") do |v|
    options[:password] = v
  end
  opts.on("-i keyfile", "the ssh id_rsa file") do |v|
    options[:key] = v
  end
  opts.on("--nopause", "no pause for first operation") do |v|
    options[:nopause] = v
  end
  opts.on("-c commands","--command commands", "commands") do |v|
    options[:command] = v
  end
  opts.on("-C cmdfile","--cmdfile cmdfile", "script path") do |v|
    options[:cmdfile] = v
    unless File.exists? v
	puts "command file doesn't exists!".to_red
	exit
    end
  end
  opts.on("--help", "help") do |v|
      puts opts
      exit
  end
end.parse!
unless options[:key] || options[:password]
    if File.exists? ENV['HOME']+"/.jsshrc"
        config=YAML::load_file(ENV['HOME']+"/.jsshrc")
        options[:key]||=config['keyfile'] if config['keyfile']
        options[:user]||=config['user'] if config['user']
    else
        options[:key]||=ENV['HOME']+'/.ssh/id_rsa'
    end
end
lambda{puts "No command or command file specify";exit}.call unless options[:cmdfile] || options[:command]
lambda{puts "Please specify the user";exit}.call unless options[:user]
lambda{puts "Please specify the rsa file or password";exit}.call unless options[:key] || options[:password]

class Jssh
	attr_accessor :hosts,:user, :auth_cfg, :cmd, :printer
    
	def initialize
		@auth_cfg={}
        self.printer=:on
		@queue=Queue.new
		Thread.new(self) do |rssh|
			while true
				puts rssh.messages.pop if rssh.printer
			end
		end
	end
    def messages
        @queue
    end
	def go(from=0,len=nil)
		len||=self.hosts.size
        to=from+len-1
		password=self.auth_cfg[:password]
        keys=[self.auth_cfg[:key]].reject{|x| x.nil?}
		self.hosts[from..to].each_with_index do |host,i|
            result=""
			begin
			Net::SSH.start(host,self.user,:keys=>keys,:password=>password) do |ssh|
				result=ssh.exec!(self.cmd)
			end
			rescue=>e
				result=e.to_s
			end
			yield host,result if block_given?
		end
	end
	def execute(from=0,len=nil,group_size=10)
		threads=[]
		len||=self.hosts.size
        to=from+len-1
		divider(self.hosts[from..to].size,group_size) do |df,dt|
			threads<<Thread.new(self,from+df,from+dt) do |rssh,f,t|
				rssh.go(f,t) do |h,r|
			        output="="*20+h+"="*20+"\n"+r
                    rssh.messages.push output
                end
			end
		end	
		while threads.find{|t| t.alive? }
                sleep 1
        end
	end

	private
	def divider(total,gsize)
		gcnt=total/gsize
		gcnt=gcnt+1 if total%gsize!=0
		gcnt.times do |i|
			from,len=i*gsize,gsize
			len=total%gsize if i==gcnt-1
			yield from,len
		end
	end
end

rs=Jssh.new
if options[:hostfile]
	orig_hosts=File.read(options[:hostfile]).split("\n")
else
	orig_hosts=options[:hostlist].split(",")
end
rs.user=options[:user]
rs.auth_cfg[:password]=options[:password]
rs.auth_cfg[:key]=options[:key]
if options[:cmdfile]
	rs.cmd=File.read(options[:cmdfile])
else
	rs.cmd=options[:command]
end
if options[:nopause]
    rs.hosts=orig_hosts
    rs.execute 0,nil,rs.hosts.size
    puts "Finished!".to_green
    exit
end
rs.hosts=orig_hosts.take 1
rs.execute
puts "Now the operations on the first host is completed, we're going to it for a check.".to_yellow
print "Press ENTER to automatic to login #{rs.hosts.first.to_red} ..."
gets
if options[:password]
        login_to_first=%Q|expect -c 'spawn ssh #{rs.user}@#{rs.hosts.first}
expect {
"*(yes/no)?" { send "yes\r";exp_continue }
"*assword:" { send "#{options[:password]}\r" }
}
interact
'
|
else
        login_to_first="ssh -i #{options[:key]} #{rs.user}@#{rs.hosts.first}"
end
system(login_to_first)
print "Continue to finish all the left operations by parallel(p) or serial(s), [p/s] ".to_yellow
ans=gets.chomp
rs.hosts=orig_hosts[1..-1]
if ans.downcase=='p'
	rs.execute
else
	rs.execute 0,nil,rs.hosts.size
end
puts 'Finished!'.to_green
