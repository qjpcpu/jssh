#!/bin/env ruby
require 'net/ssh'
require 'optparse'
require 'yaml'
require "jssh"

options = {}
op=OptionParser.new do |opts|
  opts.banner = "Usage: jssh [options]"
  opts.on("-f file","--hostfile file", "host file, every host occupy a line") do |v|
    options[:hostfile] = v
    unless File.exists? v
    	puts "host file doesn't exists!".to_red
	exit
    end
  end
  opts.on("-h hosts","--hosts hosts", "hosts list") do |v|
    options[:hostlist] = v
  end
  opts.on("-u user","--user user", "user name") do |v|
    options[:user] = v
  end
  opts.on("-p password","--password password", "password") do |v|
    options[:password] = v
  end
  opts.on("-i keyfile", "the ssh id_rsa file") do |v|
    options[:key] = v
  end
  opts.on("-b","--break", "pause after first operation") do |v|
    options[:pause] = v
  end
  opts.on("-g gsize","--groupsize gsize",OptionParser::OctalInteger, "The size of parallel group, default is 10") do |v|
    options[:gsize] = v 
  end
  opts.on("-c cmdfile","--cmdfile cmdfile", "script path") do |v|
    options[:cmdfile] = v
    unless File.exists? v
    	puts "command file doesn't exists!".to_red
	exit
    end
  end
  opts.on("--help", "help") do |v|
      puts opts
      exit
  end
  opts.on("--debug", "debug inputs") do |v|
      options[:debug]=v
  end
end
begin op.parse!
rescue => e
    puts e.to_s.to_red
    exit
end

# If neither the rsa file or password specified, go get rsa file in home directory
unless options[:key] || options[:password]
    if File.exists? ENV['HOME']+"/.jsshrc"
        config=YAML::load_file(ENV['HOME']+"/.jsshrc")
        options[:key]||=config['keyfile'] if config['keyfile']
        options[:user]||=config['user'] if config['user']
    else
        options[:key]||=ENV['HOME']+'/.ssh/id_rsa'
    end
end

# If no script file, read command from command line
options[:command]=ARGV.first if ARGV.size>0 && options[:cmdfile].nil?

# If no user specified, use current user
options[:user]||=ENV["USER"]

if options[:debug]
    puts "options: ".to_green+options.to_s
    puts "ARGV: ".to_green+ARGV.to_s
    exit
end

lambda{puts "No command or command file specify".to_red;exit}.call unless options[:cmdfile] || options[:command]
lambda{puts "Please specify the user".to_red;exit}.call unless options[:user]
lambda{puts "Please specify the rsa file or password".to_red;exit}.call unless options[:key] || options[:password]

rs=Jssh.new
if options[:hostfile]
	orig_hosts=File.read(options[:hostfile]).split("\n")
else
	orig_hosts=options[:hostlist].split(",")
end
rs.user=options[:user]
rs.auth_cfg[:password]=options[:password]
rs.auth_cfg[:key]=options[:key]
if options[:cmdfile]
	rs.cmd=File.read(options[:cmdfile])
else
	rs.cmd=options[:command]
end
unless options[:pause]
    rs.hosts=orig_hosts
    rs.execute 0,nil,rs.hosts.size
    puts "Finished!".to_green
    exit
end
rs.hosts=orig_hosts.take 1
rs.execute
puts "Now the operations on the first host is completed, we're going to it for a check.".to_yellow
print "Press ENTER to automatic to login #{rs.hosts.first.to_red} ..."
$stdin.gets
if options[:password]
        login_to_first=%Q|expect -c 'spawn ssh #{rs.user}@#{rs.hosts.first}
expect {
"*(yes/no)?" { send "yes\r";exp_continue }
"*assword:" { send "#{options[:password]}\r" }
}
interact
'
|
else
        login_to_first="ssh -i #{options[:key]} #{rs.user}@#{rs.hosts.first}"
end
system(login_to_first)
print "Continue to finish all the left operations by parallel(p) or serial(s), [p/s] ".to_yellow
ans=$stdin.gets.chomp
rs.hosts=orig_hosts[1..-1]
if ans.downcase=='p'
    gs=options[:gsize]
    gs=10 if gs<1
	rs.execute 0,nil,gs
else
	rs.execute 0,nil,rs.hosts.size
end
puts 'Finished!'.to_green
